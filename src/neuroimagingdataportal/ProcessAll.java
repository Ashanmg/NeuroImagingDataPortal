/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package neuroimagingdataportal;

import java.awt.Dimension;
import java.awt.image.BufferedImage;
import java.beans.PropertyChangeEvent;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import javax.imageio.ImageIO;
import javax.imageio.stream.ImageOutputStream;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.SwingWorker;
import static neuroimagingdataportal.InternalPanel2.slidervalue1;
import static neuroimagingdataportal.InternalPanel2.slidervalue2;

/**
 *
 * @author ashan
 */
public class ProcessAll extends javax.swing.JPanel {

    String[] ImageArray;
    int value1;
    int value2;
    int count = 1;

    String savedUrl;
    String currentDirectory;
    String selectedphotourl;

    String targetnew;
    CopyTask task;
    String path="";
    String zipfilename; 

    public ProcessAll() {
        initComponents();
    }

    public ProcessAll(String[] imageArray, int slidervalue1, int slidervalue2, String path, String selectedfile,String unzipedfilename) {
        initComponents();
        this.currentDirectory = path;
        this.selectedphotourl = selectedfile;
        this.zipfilename = unzipedfilename;
        this.ImageArray = imageArray;
        this.value1 = slidervalue1;
        this.value2 = slidervalue2;
        numberOfImages.setText(Integer.toString(ImageArray.length));
        btnCancel.setText("Back");

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDesktopPane4 = new javax.swing.JDesktopPane();
        urlfield = new javax.swing.JTextField();
        btnBrowsePath = new javax.swing.JButton();
        presentageBar = new javax.swing.JProgressBar();
        jLabel2 = new javax.swing.JLabel();
        jDesktopPane2 = new javax.swing.JDesktopPane();
        jDesktopPane3 = new javax.swing.JDesktopPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtDetails = new javax.swing.JTextArea();
        numberOfImages = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        lblconvertORselect = new javax.swing.JLabel();
        btnStart = new javax.swing.JButton();
        btnPause = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();

        jDesktopPane4.setBackground(new java.awt.Color(102, 102, 102));

        urlfield.setBackground(new java.awt.Color(153, 153, 153));
        urlfield.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                urlfieldActionPerformed(evt);
            }
        });

        btnBrowsePath.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        btnBrowsePath.setText("Select Path");
        btnBrowsePath.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBrowsePathActionPerformed(evt);
            }
        });

        presentageBar.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel2.setText("Progress level");

        jDesktopPane2.setBackground(new java.awt.Color(102, 102, 102));

        jDesktopPane3.setBackground(new java.awt.Color(102, 102, 102));

        txtDetails.setColumns(20);
        txtDetails.setRows(5);
        jScrollPane1.setViewportView(txtDetails);

        numberOfImages.setFont(new java.awt.Font("Tahoma", 0, 27)); // NOI18N
        numberOfImages.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("Images");

        lblconvertORselect.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        lblconvertORselect.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblconvertORselect.setText("Selected");

        jDesktopPane3.setLayer(jScrollPane1, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane3.setLayer(numberOfImages, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane3.setLayer(jLabel5, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane3.setLayer(lblconvertORselect, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jDesktopPane3Layout = new javax.swing.GroupLayout(jDesktopPane3);
        jDesktopPane3.setLayout(jDesktopPane3Layout);
        jDesktopPane3Layout.setHorizontalGroup(
            jDesktopPane3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDesktopPane3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 683, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jDesktopPane3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(numberOfImages, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblconvertORselect, javax.swing.GroupLayout.DEFAULT_SIZE, 115, Short.MAX_VALUE))
                .addContainerGap())
        );
        jDesktopPane3Layout.setVerticalGroup(
            jDesktopPane3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDesktopPane3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jDesktopPane3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jDesktopPane3Layout.createSequentialGroup()
                        .addComponent(numberOfImages, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(26, 26, 26)
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblconvertORselect, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 99, Short.MAX_VALUE))
                    .addComponent(jScrollPane1))
                .addContainerGap())
        );

        jDesktopPane2.setLayer(jDesktopPane3, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jDesktopPane2Layout = new javax.swing.GroupLayout(jDesktopPane2);
        jDesktopPane2.setLayout(jDesktopPane2Layout);
        jDesktopPane2Layout.setHorizontalGroup(
            jDesktopPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jDesktopPane3)
        );
        jDesktopPane2Layout.setVerticalGroup(
            jDesktopPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jDesktopPane3)
        );

        btnStart.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnStart.setText("Start");
        btnStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStartActionPerformed(evt);
            }
        });

        btnPause.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnPause.setText("Finish");
        btnPause.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPauseActionPerformed(evt);
            }
        });

        btnCancel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnCancel.setText("Cancel");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        jDesktopPane4.setLayer(urlfield, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane4.setLayer(btnBrowsePath, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane4.setLayer(presentageBar, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane4.setLayer(jLabel2, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane4.setLayer(jDesktopPane2, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane4.setLayer(btnStart, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane4.setLayer(btnPause, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane4.setLayer(btnCancel, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jDesktopPane4Layout = new javax.swing.GroupLayout(jDesktopPane4);
        jDesktopPane4.setLayout(jDesktopPane4Layout);
        jDesktopPane4Layout.setHorizontalGroup(
            jDesktopPane4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDesktopPane4Layout.createSequentialGroup()
                .addGroup(jDesktopPane4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jDesktopPane4Layout.createSequentialGroup()
                        .addGap(418, 418, 418)
                        .addComponent(btnStart, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnPause, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jDesktopPane4Layout.createSequentialGroup()
                        .addGap(122, 122, 122)
                        .addGroup(jDesktopPane4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jDesktopPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jDesktopPane4Layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(18, 18, 18)
                                .addComponent(presentageBar, javax.swing.GroupLayout.PREFERRED_SIZE, 738, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(142, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jDesktopPane4Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(urlfield, javax.swing.GroupLayout.PREFERRED_SIZE, 575, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(35, 35, 35)
                .addComponent(btnBrowsePath)
                .addGap(190, 190, 190))
        );
        jDesktopPane4Layout.setVerticalGroup(
            jDesktopPane4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDesktopPane4Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(jDesktopPane4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnBrowsePath, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(urlfield, javax.swing.GroupLayout.DEFAULT_SIZE, 32, Short.MAX_VALUE))
                .addGap(44, 44, 44)
                .addGroup(jDesktopPane4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(presentageBar, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addComponent(jDesktopPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jDesktopPane4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnPause, javax.swing.GroupLayout.DEFAULT_SIZE, 37, Short.MAX_VALUE)
                    .addComponent(btnStart, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnCancel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(36, 36, 36))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jDesktopPane4)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jDesktopPane4)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void urlfieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_urlfieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_urlfieldActionPerformed

    private void btnBrowsePathActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBrowsePathActionPerformed
        JFileChooser chooser = new JFileChooser();
        
        chooser.setMultiSelectionEnabled(true);
        chooser.setDialogTitle("save path");
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        //chooser.setAcceptAllFileFilterUsed(false);
        int returnvalue= chooser.showSaveDialog(null);

        if(returnvalue== JFileChooser.APPROVE_OPTION){
            path= chooser.getSelectedFile().getAbsolutePath();
            urlfield.setText(path);
            targetnew = urlfield.getText();
        }
        //File currentdirectory = chooser.getCurrentDirectory();
        
    }//GEN-LAST:event_btnBrowsePathActionPerformed


    private void btnStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStartActionPerformed

        if (targetnew.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Please select savePath to Start", "WARNING_MESSAGE", JOptionPane.WARNING_MESSAGE);
        } else {
            task = this.new CopyTask(targetnew);
            //task.addPropertyChangeListener(this);
            task.execute();

            // btnCopy.setText("Cancel");
            btnStart.setEnabled(false);
            btnPause.setEnabled(false);
            btnCancel.setText("Cancel");
        }
    }//GEN-LAST:event_btnStartActionPerformed

    private void btnPauseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPauseActionPerformed
        System.exit(0);
    }//GEN-LAST:event_btnPauseActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        if (btnCancel.getText().equals("Back")) {
            // go bac to the previous stage !!!!
            jDesktopPane4.removeAll();
            jDesktopPane4.repaint();
            InternalPanel2 panel = new InternalPanel2(currentDirectory, selectedphotourl);
            Dimension screenSize = jDesktopPane4.getSize();
            panel.setSize(screenSize.width, screenSize.height);
            jDesktopPane4.add(panel);
            int width = panel.getWidth();
            int height = panel.getHeight();
            panel.setBounds(((screenSize.width / 2) - (width / 2)), ((screenSize.height / 2) - (height / 2)), width, height);
            panel.setVisible(true);
        }
        if (btnCancel.getText().equals("Cancel")) {
            // go to the very basic stage
            try {
                //task.wait();
                int value = JOptionPane.showConfirmDialog(null, "Do you really want to cancel?", "Confirm exit", JOptionPane.YES_NO_CANCEL_OPTION);

                if (value == 0) {
                    jDesktopPane4.removeAll();
                    jDesktopPane4.repaint();
                    InternalPanel1 panel = new InternalPanel1();
                    Dimension screenSize = jDesktopPane4.getSize();
                    panel.setSize(screenSize.width, screenSize.height);
                    jDesktopPane4.add(panel);
                    int width = panel.getWidth();
                    int height = panel.getHeight();
                    panel.setBounds(((screenSize.width / 2) - (width / 2)), ((screenSize.height / 2) - (height / 2)), width, height);
                    panel.setVisible(true);
                    // final temporary saved file will be deleted !!!
                    File file = new File(savedUrl);
                    file.delete();
                    task.cancel(true);
                } else {
                    System.out.println("Do nothing");
                    //task.run();
                }
            } catch (Exception e) {

            }
        }
    }//GEN-LAST:event_btnCancelActionPerformed

//    public void propertyChange(PropertyChangeEvent evt) // property changed here
//    {
//        if ("progress".equals(evt.getPropertyName())) {
//            int progress = (Integer) evt.getNewValue();
//            presentageBar.setValue(progress);
//        }
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBrowsePath;
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnPause;
    private javax.swing.JButton btnStart;
    private javax.swing.JDesktopPane jDesktopPane2;
    private javax.swing.JDesktopPane jDesktopPane3;
    private javax.swing.JDesktopPane jDesktopPane4;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblconvertORselect;
    private javax.swing.JLabel numberOfImages;
    private javax.swing.JProgressBar presentageBar;
    private javax.swing.JTextArea txtDetails;
    private javax.swing.JTextField urlfield;
    // End of variables declaration//GEN-END:variables

// Create an another class here called CopyTask
    class CopyTask extends SwingWorker<Void, Integer> {

        private String target;
//        private long totalBytes = 0L;
//        private long copiedBytes = 0L;

        public CopyTask(String target) {
            this.target = target;

            presentageBar.setValue(0);
        }

        @Override
        protected Void doInBackground() throws Exception {
//            txtDetails.append("Retrieving some info ... ");
//            retrieveTotalBytes(source);
//            txtDetails.append("Done!\n");

//            copycannyImages();
            numberOfImages.setText("0");
            lblconvertORselect.setText("Converted");
            presentageBar.setMaximum(ImageArray.length - 1);
           // ArrayList<String> list = new ArrayList<String>();
            
            int total = 0;
            for (int i = 0; i < ImageArray.length; i++) {
                try {
                    presentageBar.setValue(i);
                    //*************** get the canny edge and going to save it to the given path !!!! ***********//

                    EdgedetectProcessing er = new EdgedetectProcessing(ImageArray[i], count, currentDirectory);
                    savedUrl = er.process(value1, value2);
                    System.out.println(value1 + "  " + value2);
                    System.out.println("done");
                    String jpegname = ImageArray[i];
                    // given String devided to two sub strings
                    int index = jpegname.lastIndexOf("\\");
                    System.out.println(index);
                    // get the save directory here and concatnate with the last path of the given image
                    String endpart = jpegname.substring(index + 1);
                    //System.out.println(firstpart);
                    String savejpegname = urlfield.getText()+"/"+ endpart;
                    System.out.println(savejpegname);
                    // make the file array list :)
                   // list.add(savejpegname);
                    
                    
                    File myJpegFile = new File(savejpegname);
                    //System.out.println("  done");

                    // make a new file to read image and after reading temporory saved image will be deleted.
                    File file = new File(savedUrl);
                    BufferedImage saveImage = ImageIO.read(file);
                    ImageIO.write(saveImage, "jpg", myJpegFile);
                    System.out.println("finally done!");
                    txtDetails.append("  jpeg to canny - " + ImageArray[i] + " completed.... \n");
                    numberOfImages.setText(Integer.toString(i + 1));

                } catch (Exception e) {
                    System.out.println("\nError: couldn't make canny image!" + e.getMessage());
                    JOptionPane.showMessageDialog(null, "Error :: Could not make canny Image", "WARNING_MESSAGE", JOptionPane.WARNING_MESSAGE);
                    break;
                    //return;
                }

//                txtDetails.append("  jpeg to canny - " + ImageArray[i] + " completed.... \n");
//                numberOfImages.setText(Integer.toString(i));
                total = i + 1;
                //Thread.sleep(1000);
            }
            txtDetails.append("=========================================================\n");
            if (total == ImageArray.length) {
                JOptionPane.showMessageDialog(null, "Successfully converted jpeg images to canny images.", "SUCCESSFULLY CONVERTED", JOptionPane.INFORMATION_MESSAGE);
            }
            // final temporary saved file will be deleted !!!
            File file = new File(savedUrl);
            file.delete();
            btnCancel.setText("Back");
            
           //CreateZip cz = new CreateZip(Arraylist<String> list,);
            CreateZip czz = new CreateZip(path,zipfilename);
            
            return null;

        }

//        @Override
//        public void process(List<Integer> chunks) {
//            for (int i : chunks) {
//                progressCurrent.setValue(i);
//            }
//        }
        @Override
        protected void done() {
            //setProgress(100);
            btnStart.setEnabled(true);
            btnPause.setEnabled(true);
        }

//        private void retrieveTotalBytes(File sourceFile) {
//            File[] files = sourceFile.listFiles();
//            for (File file : files) {
//                if (file.isDirectory()) {
//                    retrieveTotalBytes(file);
//                } else {
//                    totalBytes += file.length();
//                }
//            }
//        }
//
//        private void copycannyImages() throws IOException {
//
//            String[] filePaths = ImageArray;
//
//            for (String filePath : filePaths) {
////                    File srcFile = new File(sourceFile, filePath);
////                    File destFile = new File(targetFile, filePath);
////
////                    copycannyImages(srcFile, destFile);
//                EdgedetectProcessing er = new EdgedetectProcessing(filePath, count);
//                savedUrl = er.process(value1, value2);
//                System.out.println(value1 + "  " + value2);
//
//            }
//        }
    }

}
